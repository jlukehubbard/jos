EX 4:
1. What is the purpose of having an individual handler function for each exception/interrupt? (i.e., if all exceptions/interrupts were delivered to the same handler, what feature that exists in the current implementation could not be provided?)

	Certain traps push an error code onto the stack. Others do not. If all traps had to pass through the same handler, this wouldn't be possible, as the handler would always try to read an error code, and sometimes it wouldn't be there.

2. Did you have to do anything to make the user/softint program behave correctly? The grade script expects it to produce a general protection fault (trap 13), but softint’s code says int $14. Why should this produce interrupt vector 13? What happens if the kernel actually allows softint’s int $14 instruction to invoke the kernel’s page fault handler (which is interrupt vector 14)?

	I did not have to do anything to make softint work. softint produces a GPFLT because it isn't permitted to directly produce a PGFLT. PGFLT is limited to ring 0. If the kernel actually allowed softint to call the page_fault_handler, the kernel would kill the environment and print a trapframe.

